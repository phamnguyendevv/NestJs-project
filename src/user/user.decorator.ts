import { createParamDecorator, ExecutionContext, ForbiddenException } from '@nestjs/common';
import * as jwt from 'jsonwebtoken';
const SECRET = "NguyenDeptrai"
import { UserData, UserDecoratorOptions } from './user.interface';



export const User = createParamDecorator(
  (data: UserDecoratorOptions | undefined, ctx: ExecutionContext) => {
    const req = ctx.switchToHttp().getRequest();

    let user: UserData | null  = null;

    // L·∫•y user t·ª´ middleware (n·∫øu c√≥)
    if (req.user) {
      user = req.user as UserData;

    } else {
      // N·∫øu ch∆∞a c√≥ user, ki·ªÉm tra trong JWT token
      const token = req.headers.authorization ? (req.headers.authorization as string).split(' ') : null;
      if (token && token[1]) {
        try {
          const decoded: any = jwt.verify(token[1], SECRET);
          user = decoded.user;
        } catch (err) {
          throw new ForbiddenException('Invalid token');
        }
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y user => Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p
    if (!user) {
      throw new ForbiddenException('User not authenticated');
    }
     // üî• S·ª≠a l·ªói TypeScript khi ki·ªÉm tra quy·ªÅn
    if (data?.roles && data.roles.length > 0) {
      const userRoles = user.roles.split(',')
      const hasRole = userRoles.some((role: string) => data.roles?.includes(role));
      if (!hasRole) {
        throw new ForbiddenException('You do not have permission to access this resource');
      }
    }

    // Tr·∫£ v·ªÅ th√¥ng tin user ho·∫∑c m·ªôt tr∆∞·ªùng c·ª• th·ªÉ n·∫øu c√≥ y√™u c·∫ßu (vd: 'id')
    return data?.field ? user[data.field] : user;
  }
);
